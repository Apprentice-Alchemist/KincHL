name: Build

on: [push]

jobs:

  build:
    if: ${{ !contains(join(github.event.commits.*.message),'[skip ci]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest,ubuntu-latest]
        graphics: [opengl]
        include:
          - os: macos-latest
            graphics: metal
          - os: windows-latest
            graphics: direct3d11
          - os: ubuntu-latest
            graphics: vulkan
    steps:
    - name: Install Haxe
      uses: krdlab/setup-haxe@master
      with:
          haxe-version: 4.2.0

    - name: Set up MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Checkout hashlink
      uses: actions/checkout@v2
      with:
        repository: "HaxeFoundation/hashlink"
        path: "hashlink"
    - run: |
        cd hashlink
        echo "hashlink-commit=$(git rev-parse HEAD)" >> $GITHUB_ENV
    - name: Cache hashlink
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}\hashlink\x64\ReleaseVS2017
          ${{ github.workspace }}/hashlink/**.o
          ${{ github.workspace }}/hashlink/hl
          ${{ github.workspace }}/hashlink/libhl.so
        key: ${{ runner.os }}-${{ env.hashlink-commit }}
    - name: Checkout KincHL
      uses: actions/checkout@v2
      with:
        path: "KincHL"
        submodules: "recursive"
    
    - name: Apt Update
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update
      continue-on-error: true
    - name: Apt Install
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install libasound2-dev libxinerama-dev libxrandr-dev libgl1-mesa-dev libxi-dev libxcursor-dev libudev-dev libwayland-dev wayland-protocols libxkbcommon-dev libvulkan-dev --yes --quiet
    - name: Build Hashlink
      if: matrix.os != 'windows-latest' && steps.cache.outputs.cache-hit != 'true'
      run: |
        cd hashlink
        make libhl
        make hl
        make ui
        sudo make install
    - name: Build Hashlink
      if: matrix.os == 'windows-latest' && steps.cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd hashlink
        MSBuild libhl.vcxproj /nologo "-p:Configuration=ReleaseVS2017;PlatformToolset=v142;WindowsTargetPlatformVersion=10"
        MSBuild hl.vcxproj /nologo "-p:Configuration=ReleaseVS2017;PlatformToolset=v142;WindowsTargetPlatformVersion=10"
        echo "${{ github.workspace }}\hashlink\x64\ReleaseVS2017" >> $GITHUB_PATH
    - name: Build KincHL
      env:
        HASHLINK_SRC: ${{ github.workspace }}\hashlink\src
        HASHLINK_BIN: ${{ github.workspace }}\hashlink\x64\ReleaseVS2017
      run: |
        cd KincHL
        haxe --run Build -g ${{matrix.graphics}} --krafix
      
    - name: Upload Artifact
      uses: 'actions/upload-artifact@v2'
      with:
        name: ${{ matrix.os }} ${{ matrix.graphics }}
        path: kinc.hdll
    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: 'actions/upload-artifact@v2'
      with:
        name: ${{ matrix.os }} ${{ matrix.graphics }}
        path: kinc.lib
